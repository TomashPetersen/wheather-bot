from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, ContextTypes, MessageHandler,
    filters, ConversationHandler, CallbackQueryHandler
)
import aiohttp
import asyncio
import time

BOT_TOKEN = "8123994682:AAHLz7KbYUsr0pvfd49TCtfvRQaE-VzCpIA"
WEATHER_API_KEY = "1a3d1330bd4345b384f143116251404"

ASK_CITY = 1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = context.user_data.get("tip_task")
    if task and not task.done():
        task.cancel()

    await update.message.reply_text(
        "–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≥–æ—Ä–æ–¥:"
    )
    context.user_data["last_weather_time"] = time.time()

async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    success, text = await get_weather_by_city(city)
    await update.message.reply_text(text)

    if success:
        context.user_data["last_weather_time"] = time.time()
        task = asyncio.create_task(delayed_tip(context, update.effective_chat.id))
        context.user_data["tip_task"] = task
    return ASK_CITY 

async def handle_city_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    city = query.data
    success, weather_text = await get_weather_by_city(city)
    await query.edit_message_text(text=weather_text)

    if success:
        context.user_data["last_weather_time"] = time.time()
        task = asyncio.create_task(delayed_tip(context, query.message.chat_id))
        context.user_data["tip_task"] = task

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = context.user_data.get("tip_task")
    if task and not task.done():
        task.cancel()

    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–∞. –ï—Å–ª–∏ –±—É–¥–µ—Ç –Ω—É–∂–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start"
    )
    return ConversationHandler.END

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = context.user_data.get("tip_task")
    if task and not task.done():
        task.cancel()

    keyboard = [
        [InlineKeyboardButton("–ú–æ—Å–∫–≤–∞", callback_data="–ú–æ—Å–∫–≤–∞")],
        [InlineKeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", callback_data="–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [InlineKeyboardButton("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", callback_data="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")],
        [InlineKeyboardButton("–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", callback_data="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥")],
        [InlineKeyboardButton("–ö–∞–∑–∞–Ω—å", callback_data="–ö–∞–∑–∞–Ω—å")],
        [InlineKeyboardButton("–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", callback_data="–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥")],
        [InlineKeyboardButton("–ß–µ–ª—è–±–∏–Ω—Å–∫", callback_data="–ß–µ–ª—è–±–∏–Ω—Å–∫")],
        [InlineKeyboardButton("–°–∞–º–∞—Ä–∞", callback_data="–°–∞–º–∞—Ä–∞")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)

async def help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† –ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é\n"
        "/weather ‚Äî –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "/cancel ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start ‚Äî —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞\n"
        "/weather ‚Äî –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å"
    )

async def get_weather_by_city(city_name: str) -> tuple[bool, str]:
    url = "http://api.weatherapi.com/v1/current.json"
    params = {
        "key": WEATHER_API_KEY,
        "q": city_name,
        "lang": "ru"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status == 400:
                    return False, "‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
                elif response.status != 200:
                    return False, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ."

                data = await response.json()
                name = data["location"]["name"]
                temp = data["current"]["temp_c"]
                wind = data["current"]["wind_kph"]
                condition = data["current"]["condition"]["text"]

                return True, (
                    f"üìç {name}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                    f"üí® –í–µ—Ç–µ—Ä: {wind} –∫–º/—á\n"
                    f"üå§ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {condition}"
                )
    except Exception as e:
        return False, f"üö´ –û—à–∏–±–∫–∞: {e}"

async def delayed_tip(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    try:
        last_time = context.user_data.get("last_weather_time", 0)
        await asyncio.sleep(5)
        if context.user_data.get("last_weather_time", 0) == last_time:
            await context.bot.send_message(
                chat_id=chat_id,
                text="üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å /weather, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞."
            )
    except asyncio.CancelledError:
        pass

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))  # —Ç–µ–ø–µ—Ä—å –≥–ª–æ–±–∞–ª—å–Ω–æ, –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("help", help))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CallbackQueryHandler(handle_city_button))

    # —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å —Å–∞–º –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ ASK_CITY
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city))

    app.run_polling()

if __name__ == "__main__":
    main()
    
    